import pandas as pd
import getpass
import re
import datetime
from datetime import datetime
from datetime import timedelta, date
import xlsxwriter

# скачиваем справочник- список интересующих кодов
df_all_codes = pd.read_csv('C:/Users/Maksim.Smirnov/OneDrive - Unilever/Documents/Проекты/UNICA/codes_UNICA.csv', header = None, names = ['Product'])

#df_all_codes['Product'] = df_all_codes['Product'].apply(str)

sys_user = getpass.getuser()  
# путь, где будет лежать файл-справочник с позициями
path =  r"C:\Users" + "\\ ".strip() + sys_user + "\\ ".strip() + "python_SAP_scripting" + "\\ ".strip()+ "ZRGSNP_009" + "\\ ".strip()


# создаем переменные с номерами текущей и предыдущей недели
current_week_number = datetime.today().isocalendar()[1]  
prev_week_number = (date.today() - timedelta(days=7)).isocalendar()[1]



 
# загружаем файл c данными за текущую неделю
df_report_current = pd.read_excel(path + "w" +str(current_week_number)+ '_ZRGSNP_009.xls') #

list_of_weeks_current_report =[i for i in df_report_current.columns.tolist() if '.2' in i]



# загружаем файл c данными за предыдущую неделю
df_report_previous = pd.read_excel(path + "w" +str(prev_week_number)+ '_ZRGSNP_009.xls') #
list_of_weeks_prev_report =[i for i in df_report_previous.columns.tolist() if '.2' in i]



# создаем полный список недель из отчета за текущую и предыдущую недели без дублей
total_list_of_weeks = list(dict.fromkeys(list_of_weeks_current_report + list_of_weeks_prev_report))

# создаем пустую таблицу, где колонки имеют названия недель периода, захватывающего обе таблицы с входными данными
df_list_of_weeks = pd.DataFrame(columns=total_list_of_weeks)




# функция, преобразующая иходный отчет в отчет по шаблону, где присутствуют все коды (из полного справочника) и все номера недель из обоих отчетов


def make_full_report (report, df_all_codes, df_list_of_weeks):
    # оставляем только данные с "Total Demand"
    df_report = report[ report['Key Figure/Week']== 'Total Demand']
    
    #привели таблицу в соответствие с полным перечнем позиций (в иходном отчете могут быть не все позиции)
    df_report_all_codes = pd.merge(df_all_codes, df_report, how='left',  on = 'Product')
    df_report_all_weeks_codes = pd.concat([df_list_of_weeks, df_report_all_codes], axis=0)
    
    
    df_report_all_weeks_codes['Product'] = df_report_all_weeks_codes['Product'].astype(int)

    #меняем колонки местами
    cols_to_order = ['MPS Category', 'Location', 'Product']
    new_columns = cols_to_order + (df_report_all_weeks_codes.columns.drop(cols_to_order).tolist())
    df_report_all_weeks_codes = df_report_all_weeks_codes[new_columns]    

    df_report_all_weeks_codes = df_report_all_weeks_codes.iloc[:, :(3+len(total_list_of_weeks))]
    
    return df_report_all_weeks_codes


# применяем функцию к формированию отчета по шаблону    
df_report_current_week =  make_full_report  (df_report_current, df_all_codes, df_list_of_weeks)


df_report_prev_week =  make_full_report  (df_report_previous, df_all_codes, df_list_of_weeks)


 
# название файл без расширения
def get_week_num_cur(x):
        return x.split('.')[0] + '_текущ'
    
def get_week_num_prev(x):
        return x.split('.')[0] + '_prev'    
    
    
    
    
# фнукция для получения номера месяца из даты    
import datetime

def get_week_num(x):
        return datetime.datetime.strptime(x + '-1', "W%W.%Y-%w").strftime('%m')
    
##############################################################################################
# делаем заготовку для помесячного отчета на основе текущей версии  
df_report_current_week_monthly  = df_report_current_week  
df_report_current_week_monthly.columns.values[3:] = list(map(get_week_num, list(df_report_current_week_monthly.columns)[3:]))     

# делаем заготовку для помесячного отчета на основе предыдущей версии     
df_report_prev_week_monthly  = df_report_prev_week  
df_report_prev_week_monthly.columns.values[3:] = list(map(get_week_num, list(df_report_prev_week_monthly.columns)[3:]))     
    
# группируем таблицы по колонкам, относящися к одному месяцу, получая сумму по месяцам
df_report_current_week_monthly = df_report_current_week_monthly.groupby(df_report_current_week_monthly.columns, axis=1).sum()     
df_report_prev_week_monthly = df_report_prev_week_monthly.groupby(df_report_prev_week_monthly.columns, axis=1).sum()    

df_report_current_week_monthly.columns.values[:-3] = list(map(lambda x: x +'_текущ', list(df_report_current_week_monthly.columns)[:-3]))
df_report_prev_week_monthly.columns.values[:-3] = list(map(lambda x: x +'_prev', list(df_report_prev_week_monthly.columns)[:-3]))


#меняем колонки местами
cols_to_order = ['MPS Category', 'Location', 'Product']
new_columns = cols_to_order + (df_report_current_week_monthly.columns.drop(cols_to_order).tolist())
df_report_current_week_monthly = df_report_current_week_monthly[new_columns]    

#меняем колонки местами
cols_to_order = ['MPS Category', 'Location', 'Product']
new_columns = cols_to_order + (df_report_prev_week_monthly.columns.drop(cols_to_order).tolist())
df_report_prev_week_monthly = df_report_prev_week_monthly[new_columns]    





 ############################################################################################  
    
#меняем навзания колонок, ставляя только номер недели и признак текущий/предыдущий    
df_report_current_week.columns.values[3:] = list(map(get_week_num_cur, list(df_report_current_week.columns)[3:])) 
df_report_prev_week.columns.values[3:] = list(map(get_week_num_prev, list(df_report_prev_week.columns)[3:]))











# инициализирем файл, в который будут выгружаться данные
writer = pd.ExcelWriter('C:/Users/' +sys_user +'/python_SAP_scripting/Current_vs_Previous_w' + str(current_week_number)+'.xlsx', engine='xlsxwriter')
workbook  = writer.book




df_report_final = df_report_current_week.iloc[:, :3]

for i in range (3, df_report_current_week.shape[1]):
    frames = [df_report_final, df_report_current_week.iloc[:, [i]], df_report_prev_week.iloc[:, [i]]]
    df_report_final= pd.concat( frames, axis =1)
    df_report_final ['Difference %' + str(i)] =   (df_report_final.iloc[:,-2]-df_report_final.iloc[:,-1])/df_report_final.iloc[:,-1]*100
    
    df_report_final ['Difference %' + str(i)] = df_report_final ['Difference %' + str(i)].fillna(0)
    
    
    
    # форматирование
    df_report_final.to_excel(writer, sheet_name='Sheet1', index=False, float_format = "%0.1f")
    worksheet = writer.sheets['Sheet1']
    # worksheetNE = workbook.add_worksheet('Northeast Region')
    

    for j in range(2, df_report_final.shape[0]+1):


           
               
  
        # инициализируем ячейку, к которой будет применено форматирование, получаем значение формата "А1"
        # каждый раз необходимо формитаровть последнюю добавленную к табиле колонку ('Difference %')
                range_df = xlsxwriter.utility.xl_col_to_name(df_report_final.shape[1]-1).upper()+str(j)
                


            

                worksheet.conditional_format(range_df, {'type': 'no_errors',
                                                    'format': format1})
                   
                
                worksheet.conditional_format(range_df, {'type': 'cell',
                                                    'criteria': '>',
                                                    'value':  1.1, # при смещении "горки" на 1 колонку  увеличить вычитаемое на 1
                                                    'format': format2})    
        

# worksheet.conditional_format(first_row, first_col, last_row, last_col,
#                              {'type': 'blanks',
#                              'format': abc})
# worksheet.conditional_format(first_row, first_col, last_row, last_col,
#                              {'type': 'no_blanks',
#                              'format':    efg})    


writer.save()









































# инициализирем файл, в который будут выгружаться данные
writer = pd.ExcelWriter('C:/Users/' +sys_user +'/python_SAP_scripting/Current_vs_Previous_w_monthly' + str(current_week_number)+'.xlsx', engine='xlsxwriter')
workbook  = writer.book


# задаем форматы условного форматирования    
format1 = workbook.add_format({'bg_color': '#ACAAAA',
                                    'font_color': '#9C0006',
                                    'border':1
                                    })
            
        
format2 = workbook.add_format({'bg_color': '#3CCA3E',
                                        'font_color': '#9C0006',
                                        'border':1
                                        })





df_report_final_monthly = df_report_current_week_monthly.iloc[:, :3]

for i in range (3, df_report_current_week_monthly.shape[1]):
    frames = [df_report_final_monthly, df_report_current_week_monthly.iloc[:, [i]], df_report_prev_week_monthly.iloc[:, [i]]]
    df_report_final_monthly= pd.concat( frames, axis =1)
    df_report_final_monthly ['Difference %' + str(i)] =   (df_report_final_monthly.iloc[:,-2]-df_report_final_monthly.iloc[:,-1])/df_report_final_monthly.iloc[:,-1]*100
    
    df_report_final_monthly ['Difference %' + str(i)] = df_report_final_monthly ['Difference %' + str(i)].fillna(0)
    
    
    
    # форматирование
    df_report_final_monthly.to_excel(writer, sheet_name='Sheet1', index=False, float_format = "%0.1f")
    worksheet = writer.sheets['Sheet1']
    # worksheetNE = workbook.add_worksheet('Northeast Region')
    

    for j in range(2, df_report_final.shape[0]+1):


           
               
  
        # инициализируем ячейку, к которой будет применено форматирование, получаем значение формата "А1"
        # каждый раз необходимо формитаровть последнюю добавленную к табиле колонку ('Difference %')
                range_df = xlsxwriter.utility.xl_col_to_name(df_report_final_monthly.shape[1]-1).upper()+str(j)
                


            

                worksheet.conditional_format(range_df, {'type': 'no_errors',
                                                    'format': format1})
                   
                
                worksheet.conditional_format(range_df, {'type': 'cell',
                                                    'criteria': '>',
                                                    'value':  1.1, # при смещении "горки" на 1 колонку  увеличить вычитаемое на 1
                                                    'format': format2})    
        

# worksheet.conditional_format(first_row, first_col, last_row, last_col,
#                              {'type': 'blanks',
#                              'format': abc})
# worksheet.conditional_format(first_row, first_col, last_row, last_col,
#                              {'type': 'no_blanks',
#                              'format':    efg})    


writer.save()
